name: Notisense API (Poetry)

on:
  push:
    branches: [ "prod" ]

permissions:
  contents: read
  id-token: write  # for AWS OIDC

env:
  PYTHON_VERSION: "3.13"
  APP_DIR: "."                       # folder containing your Lambda handler
  ZIP_NAME: "notisense.zip"
  S3_BUCKET: "notisense"  # no underscores
  LAMBDA_NAME: "notisense-api"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4.1.7

      - name: Set up Python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: |
            poetry.lock
            pyproject.toml

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "2.1.3"

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry --version
          poetry env info

      - name: Ensure 'poetry export' is available
        run: |
          set -e
          if ! poetry help export >/dev/null 2>&1; then
            poetry self add poetry-plugin-export
          fi
          poetry help export >/dev/null

      - name: Ensure lock is up-to-date (no update)
        run: |
          poetry lock #--no-update --no-ansi

      - name: Install dependencies (Poetry)
        run: |
          poetry install --no-interaction --no-ansi --no-root

      - name: Run tests
        env:
          PYTHONPATH: .
        run: |
          poetry run python -c "import sys; print('Python OK:', sys.version)"
          # poetry run pytest -q

      - name: Build Lambda package
        run: |
          set -euo pipefail
          rm -rf package "${{ env.ZIP_NAME }}"
          # Export runtime deps only (dev/test groups excluded)
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt -t package

          # Copy application code, skip unwanted files
          rsync -a "${{ env.APP_DIR }}/" package/ \
            --exclude ".git/" --exclude ".github/" --exclude ".venv/" \
            --exclude "__pycache__/" --exclude "tests/" --exclude "*.pyc"

          # Include top-level handler if present
          if [ -f "main.py" ]; then cp main.py package/; fi

          # Zip contents
          (cd package && zip -r9 "../${{ env.ZIP_NAME }}" .)
          ls -lh "${{ env.ZIP_NAME }}"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: notisense
          path: ${{ env.ZIP_NAME }}
          retention-days: 3

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: notisense

      - name: Debug AWS secrets (masked)
        run: |
          echo "AWS_ACCOUNT_ID is set: ${{ secrets.AWS_ACCOUNT_ID }}"
          echo "AWS_GITHUB_OIDC_ROLE is set: ${{ secrets.AWS_GITHUB_OIDC_ROLE }}"
          echo "AWS_DEFAULT_REGION is set: ${{ secrets.AWS_DEFAULT_REGION }}"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_GITHUB_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Upload to S3
        run: aws s3 cp "${{ env.ZIP_NAME }}" "s3://${{ env.S3_BUCKET }}/${{ env.ZIP_NAME }}"

      - name: Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name "${{ env.LAMBDA_NAME }}" \
            --s3-bucket "${{ env.S3_BUCKET }}" \
            --s3-key "${{ env.ZIP_NAME }}"